"""add address tables

Revision ID: 9926d9fc3389
Revises: e1a1ae969cb5
Create Date: 2024-04-25 02:21:32.256988

"""

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = "9926d9fc3389"
down_revision = "e1a1ae969cb5"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # create countries table: 1 one to many states
    op.create_table(
        "countries",
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            primary_key=True,
            comment="This column stores autoincrement id",
        ),
        sa.Column(
            "name",
            sa.String(50),
            nullable=True,
            unique=True,
            comment="country name",
        ),
        sa.Column(
            "abbrev_2",
            sa.String(2),
            nullable=False,
            unique=True,
            index=True,
            comment="2 char abbreviation of the country name",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # create states table: 1 state has many cities
    # and 1 state belongs to one country
    op.create_table(
        "states",
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            primary_key=True,
            comment="This column stores autoincrement id",
        ),
        sa.Column(
            "name",
            sa.String(50),
            nullable=True,
            comment="state name",
        ),
        sa.Column(
            "state_code",
            sa.String(10),
            nullable=False,
            comment="abbreviation of the state name",
        ),
        sa.Column(
            "country_id",
            sa.BigInteger(),
            nullable=False,
            comment="foreign key reference to country: id",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.ForeignKeyConstraint(
            ["country_id"],
            ["countries.id"],
            name="fk_state_countries_id",
        ),
        sa.UniqueConstraint(
            "country_id",
            "state_code",
            name="uniq_ap_country_state",
        ),
    )
    # create cities table: 1 city has many addresses
    # and 1 address belongs to one city
    op.create_table(
        "cities",
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            primary_key=True,
            comment="This column stores autoincrement id",
        ),
        sa.Column(
            "name",
            sa.String(50),
            nullable=False,
            comment="city name",
        ),
        sa.Column(
            "state_id",
            sa.BigInteger(),
            nullable=False,
            comment="foreign key reference to state: id",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.ForeignKeyConstraint(
            ["state_id"],
            ["states.id"],
            name="fk_city_states_id",
        ),
        sa.UniqueConstraint(
            "state_id",
            "name",
            name="uniq_ap_state_city",
        ),
    )
    # create addresses table: 1 city has many addresses
    # and 1 address belongs to one city
    op.create_table(
        "addresses",
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            primary_key=True,
            comment="This column stores autoincrement id",
        ),
        sa.Column(
            "address",
            sqlmodel.sql.sqltypes.AutoString(),
            nullable=False,
            comment="address",
        ),
        sa.Column(
            "zip",
            sa.String(15),
            nullable=True,
            comment="zip code",
        ),
        sa.Column(
            "city_id",
            sa.BigInteger(),
            nullable=False,
            comment="foreign key reference to city: id",
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.ForeignKeyConstraint(
            ["city_id"],
            ["cities.id"],
            name="fk_addr_cities_id",
        ),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("fk_addr_cities_id", table_name="addresses")
    op.drop_constraint("fk_city_states_id", table_name="cities")
    op.drop_constraint("fk_state_countries_id", table_name="states")
    op.drop_constraint("uniq_ap_country_state", table_name="states")
    op.drop_constraint("uniq_ap_state_city", table_name="cities")
    op.drop_table("countries")
    op.drop_table("states")
    op.drop_table("cities")
    op.drop_table("addresses")
    # ### end Alembic commands ###
